unit ClienteController;

interface

uses 
Horse,
System.JSON,
System.SysUtils,
ClienteModel,
FireDAC.Comp.Client,
Data.DB,
DataSet.Serialize;


procedure Registry;
procedure listCliente(Req: THorseRequest; Res: THorseResponse; Next: TProc);
procedure addCliente(Req: THorseRequest; Res: THorseResponse; Next: TProc);
procedure deleteCliente(Req: THorseRequest; Res: THorseResponse; Next: TProc);
procedure updateCliente(Req: THorseRequest; Res: THorseResponse; Next: TProc);

implementation



procedure listCliente(Req: THorseRequest; Res: THorseResponse; Next: TProc);
var
  cli : TCliente;
  query : TFDQuery;
  erro : string;
  arrayClientes : TJSONArray;
begin

  try
     cli := TCliente.Create;
  except 
     Res.Send('Erro ao conectar-se com o banco.').Status(500);
     exit;
  end;

  try
     query := cli.ListarCliente('', erro);
     arrayClientes := query.ToJSONArray();
     Res.Send<TJSONArray>(arrayClientes);
  finally
     query.Free;
     cli.Free;
  end;

end;

procedure addCliente(Req: THorseRequest; Res: THorseResponse; Next: TProc);
begin
  Res.Send('Add Clientes');
end;

procedure deleteCliente(Req: THorseRequest; Res: THorseResponse; Next: TProc);
begin
  Res.Send('Delete Clientes');
end;

procedure updateCliente(Req: THorseRequest; Res: THorseResponse; Next: TProc);
begin
  Res.Send('Update Clientes');
end;

procedure Registry;
begin
    THorse.Get('/cliente', listCliente);
    THorse.Post('/cliente', addCliente);
    THorse.Put('/cliente', updateCliente);
    THorse.Delete('/cliente', deleteCliente);

end;

end.
